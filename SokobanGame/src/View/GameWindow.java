/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GameWindow.java
 *
 * Created on 11-jun-2012, 17:46:38
 */

package View;

import Model.Box;
import Model.Maze;
import Model.Direction;
import Model.Position;
import Model.GameObject;
import Model.Wall;
import Model.Character;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

/**
 *
 * @author Peter-Pim
 */
public class GameWindow extends javax.swing.JPanel
    implements KeyListener {

    private Maze maze;
    private GameObject object;
    private ScoreWindow scoreWindow;
    private Character character;

    private final int WORLD_HEIGHT = 550;
    private final int WORLD_WIDTH = 750;
    private final int SQUARE_SIZE = 50;
    private final int ROWS = WORLD_WIDTH / 50;
    private final int COLS = WORLD_HEIGHT / 50;

    /** Creates new form GameWindow */
    public GameWindow() {
        setBackground(Color.BLACK);
        setSize(getWorldWidth(), getWorldHeight());
        addKeyListener(this);
        setFocusable(true);
        initComponents();
        repaint();
    }

    public void setMaze(Maze maze) {
        this.maze = maze;
    }

    public void setCharacter(Character character) {
        this.character = character;
        character.setScoreWindow(scoreWindow);
    }

    public void setScoreWindow(ScoreWindow scoreWindow) {
        this.scoreWindow = scoreWindow;
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        drawOutlining(g);
        drawWorld(g);
    }

    public void drawWorld(Graphics g) {
        int y = 0;
        while(y <= 500) {
            for(int i = 0; i < getRows(); i ++) {

                Position currentPos = maze.getPosition(i, y / 50);
                object = currentPos.getObject();

                if (object instanceof Box) {
                    object.draw(g, object.getColor());
                } else if(object instanceof Wall) {
                    object.draw(g, object.getColor());
                } else if (object instanceof Character) {
                    object.draw(g, object.getColor());
                    if (currentPos.getEndField() == true) {
                        g.setColor(Color.RED);
                        g.drawRect(currentPos.getX(), currentPos.getY(),
                            getSquareSize(), getSquareSize());
                    }
                } else if(currentPos.getEndField() == true) {
                    g.setColor(Color.RED);
                    g.drawRect(currentPos.getX(), currentPos.getY(),
                            getSquareSize(), getSquareSize());
                } else if (currentPos.getTeleport() == true) {
                    g.setColor(new Color(149, 50, 62));
                    g.fillRect(currentPos.getX(), currentPos.getY(),
                            getSquareSize(), getSquareSize());
                    g.setColor(new Color(213, 26, 39));
                    g.drawRect(currentPos.getX(), currentPos.getY(),
                            getSquareSize(), getSquareSize());
                    g.setColor(new Color(115, 209,240));
                    if(currentPos.getTeleportDest() != null) {
                        g.drawRect(currentPos.getTeleportDest().getX(),
                                currentPos.getTeleportDest().getY(), getSquareSize(),
                                getSquareSize());
                    }
                } else if (currentPos.getPortal() == true) {
                    if(maze.getBoxes() == 0) {
                        g.setColor(new Color(159, 190, 246));
                        g.fillRect(currentPos.getX(), currentPos.getY(), getSquareSize(),
                                getSquareSize());
                    }
                }
            }
            y += 50;
        }
    }

    public void drawOutlining(Graphics g) {
        g.setColor(new Color(220, 220, 40));
        g.drawLine(0, 0, 750, 0);
        g.drawLine(0, 0, 0, 550);
        g.drawLine(750, 0, 750, 550);
        g.drawLine(0, 550, 750, 550);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public int getWorldWidth() {
        return WORLD_WIDTH;
    }

    public int getWorldHeight() {
        return WORLD_HEIGHT;
    }

    public int getSquareSize() {
        return SQUARE_SIZE;
    }

    public int getCols() {
        return COLS;
    }

    public int getRows() {
        return ROWS;
    }
    
    public void keyTyped(KeyEvent e) { }

    public void keyPressed(KeyEvent e) { }

    public void keyReleased(KeyEvent e) {
        switch(e.getKeyCode()) {
            case KeyEvent.VK_UP:
                character.move(Direction.NORTH);
                break;
            case KeyEvent.VK_LEFT:
                character.move(Direction.WEST);
                break;
            case KeyEvent.VK_DOWN:
                character.move(Direction.SOUTH);
                break;
            case KeyEvent.VK_RIGHT:
                character.move(Direction.EAST);
                break;
            case KeyEvent.VK_F5:
                maze.reset();
        }
        if(character.getPosition().getPortal() == true &&
                maze.getBoxes() == 0) {
            maze.reset();
        }
        repaint();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
