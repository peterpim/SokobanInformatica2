/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MenuWindow.java
 *
 * Created on 11-jun-2012, 19:05:09
 */

package View;

import Model.Game;
import Model.Maze;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;

/**
 *
 * @author Peter-Pim
 */
public class MenuWindow extends javax.swing.JPanel {
    private Game game;
    private Maze maze;
    private ScoreWindow scoreWindow;
    private InstructionWindow instructionWindow;

    private boolean started = false;

    /** Creates new form MenuWindow */
    public MenuWindow() {
        StartGameListener startGame = new StartGameListener();
        RestartGameListener restartGame = new RestartGameListener();
        OpenInstructionsListener instructions = new OpenInstructionsListener();
        EnableChildmodeListener enableChildmode = new EnableChildmodeListener();
        ResumeGameListener resumeGame = new ResumeGameListener();
        QuitGameListener quitGame = new QuitGameListener();

        setBackground(new Color(250, 255, 129));
        initComponents();

        jBtnStartGame.addActionListener(startGame);
        jBtnRestartGame.addActionListener(restartGame);
        jBtnInstructions.addActionListener(instructions);
        jBtnEnableChildmode.addActionListener(enableChildmode);
        jBtnResume.addActionListener(resumeGame);
        jBtnQuit.addActionListener(quitGame);

        checkStarted();
    }

    public void setGame(Game game) {
        this.game = game;
    }

    public void setMaze(Maze maze) {
        this.maze = maze;
    }
    
    public void setScoreWindow(ScoreWindow scoreWindow) {
        this.scoreWindow = scoreWindow;
    }

    public void setInstructionWindow(InstructionWindow instructionWindow) {
        this.instructionWindow = instructionWindow;
    }

    public void checkStarted() {
        if(started == false) {
            jBtnRestartGame.setVisible(false);
            jBtnResume.setVisible(false);
        } else if(started == true) {
            jBtnRestartGame.setVisible(true);
            jBtnInstructions.setVisible(true);
            jBtnResume.setVisible(true);
            jBtnStartGame.setVisible(false);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBtnInstructions = new java.awt.Button();
        jLabel2 = new javax.swing.JLabel();
        jBtnRestartGame = new java.awt.Button();
        jLabel1 = new java.awt.Label();
        jBtnStartGame = new java.awt.Button();
        jBtnEnableChildmode = new java.awt.Button();
        jBtnResume = new java.awt.Button();
        jBtnQuit = new java.awt.Button();

        setPreferredSize(new java.awt.Dimension(800, 650));

        jBtnInstructions.setBackground(new java.awt.Color(51, 0, 0));
        jBtnInstructions.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jBtnInstructions.setForeground(new java.awt.Color(153, 153, 153));
        jBtnInstructions.setLabel("Instructions");

        jLabel2.setFont(new java.awt.Font("Papyrus", 3, 36));
        jLabel2.setForeground(new java.awt.Color(102, 0, 0));
        jLabel2.setText("Sokoban Menu");

        jBtnRestartGame.setBackground(new java.awt.Color(51, 0, 0));
        jBtnRestartGame.setFont(new java.awt.Font("Dialog", 1, 18));
        jBtnRestartGame.setForeground(new java.awt.Color(153, 153, 153));
        jBtnRestartGame.setLabel("Restart Game");

        jLabel1.setFont(new java.awt.Font("Papyrus", 0, 10));
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Copyright Â© 2012 Peter-Pim Baken");

        jBtnStartGame.setBackground(new java.awt.Color(51, 0, 0));
        jBtnStartGame.setFont(new java.awt.Font("Dialog", 1, 18));
        jBtnStartGame.setForeground(new java.awt.Color(153, 153, 153));
        jBtnStartGame.setLabel("Start Game");

        jBtnEnableChildmode.setBackground(new java.awt.Color(51, 0, 0));
        jBtnEnableChildmode.setFont(new java.awt.Font("Dialog", 1, 18));
        jBtnEnableChildmode.setForeground(new java.awt.Color(153, 153, 153));
        jBtnEnableChildmode.setLabel("Enable Childmode");

        jBtnResume.setBackground(new java.awt.Color(51, 0, 0));
        jBtnResume.setFont(new java.awt.Font("Dialog", 1, 18));
        jBtnResume.setForeground(new java.awt.Color(153, 153, 153));
        jBtnResume.setLabel("Resume");

        jBtnQuit.setBackground(new java.awt.Color(51, 0, 0));
        jBtnQuit.setFont(new java.awt.Font("Dialog", 1, 18));
        jBtnQuit.setForeground(new java.awt.Color(153, 153, 153));
        jBtnQuit.setLabel("Quit Game");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(256, 256, 256)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jBtnStartGame, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jBtnRestartGame, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jBtnInstructions, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jBtnEnableChildmode, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jBtnResume, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jBtnQuit, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(266, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(jLabel2)
                .addGap(37, 37, 37)
                .addComponent(jBtnStartGame, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnRestartGame, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnInstructions, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnEnableChildmode, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnResume, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(jBtnQuit, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel1.getAccessibleContext().setAccessibleName("");
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button jBtnEnableChildmode;
    private java.awt.Button jBtnInstructions;
    private java.awt.Button jBtnQuit;
    private java.awt.Button jBtnRestartGame;
    private java.awt.Button jBtnResume;
    private java.awt.Button jBtnStartGame;
    private java.awt.Label jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables

    class StartGameListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            game.buildBoard();
            maze.initPositions();
            maze.initWorld();
            started = true;
            setVisible(false);
            instructionWindow.setVisible(false);
            scoreWindow.setVisible(true);
            game.setWindowFocus();
        }
    }

    class RestartGameListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            Object[] opties = {"Yes", "No"};
            int answer = JOptionPane.showOptionDialog(null,
                    "Are you sure you want to restart the game?",
                    "Restart Game", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE,
                    null, opties, opties[1]);
            if(answer == JOptionPane.YES_OPTION) {
                maze.setLevel(0);
                maze.reset();
                game.setWindowFocus();
                scoreWindow.setVisible(true);
                setVisible(false);
            }
        }
    }

    class OpenInstructionsListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
                instructionWindow.setVisible(true);
                setVisible(false);
        }
    }

    class EnableChildmodeListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            game.setChildmode();
            if(game.getChildMode() == true) {
                JOptionPane.showMessageDialog(null, "Childmode was enabled",
                    "Childmode", JOptionPane.INFORMATION_MESSAGE);
                if(started == true) {
                    game.setWindowFocus();
                    scoreWindow.setVisible(true);
                    setVisible(false);
                }
            } else
                JOptionPane.showMessageDialog(null, "Childmode was disabled",
                    "Childmode", JOptionPane.INFORMATION_MESSAGE);
                if(started == true) {
                    game.setWindowFocus();
                    scoreWindow.setVisible(true);
                    setVisible(false);
                }
        }
    }

    class ResumeGameListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            game.setWindowFocus();
            scoreWindow.setVisible(true);
            setVisible(false);
        }
    }

    class QuitGameListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            Object[] opties = {"Yes", "No"};
            int answer = JOptionPane.showOptionDialog(null,
                    "Are you sure you want to quit?", "Quit game",
                        JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE,
                        null, opties, opties[1]);
            if(answer == JOptionPane.YES_OPTION) {
                System.exit(0);
            }
        }
    }
}
